const path=require("path"),{Porcupine:Porcupine}=require("@picovoice/porcupine-node"),{getPlatform:getPlatform}=require("@picovoice/porcupine-node/dist/platforms"),{BuiltinKeyword:BuiltinKeyword,getBuiltinKeywordPath:getBuiltinKeywordPath}=require("@picovoice/porcupine-node/dist/builtin_keywords"),keywordStringMap=new Map(Array.from(new Map(Object.entries(BuiltinKeyword)),(e=>e.reverse()))),PassThrough=require("stream").PassThrough,PLATFORM_RECORDER_MAP=new Map;PLATFORM_RECORDER_MAP.set("linux","arecord"),PLATFORM_RECORDER_MAP.set("mac","sox"),PLATFORM_RECORDER_MAP.set("raspberry-pi","arecord"),PLATFORM_RECORDER_MAP.set("windows","sox");const Recorder=require("@bugsounet/node-lpcm16");let log=Function.prototype.bind.call(console.log,console,"[PORCUPINE]");class PORCUPINE{constructor(e,i,t=(()=>{}),r){let o;this.micConfig=i,this.config=e,this.callback=t,this.debug=r,this.initialized=!1,this.debug||(log=function(){}),this.config.dev&&log("DetectorConfig:",this.config),this.defaultMicOption={recorder:"arecord",device:"plughw:1",sampleRate:16e3,channels:1,threshold:.5,thresholdStart:null,thresholdEnd:null,silence:"1.0",verbose:!1,debug:this.debug};try{o=getPlatform()}catch(e){return console.error("[PORCUPINE] The NodeJS binding does not support this platform. Supported platforms include macOS (x86_64), Windows (x86_64), Linux (x86_64), and Raspberry Pi (1-4)"),console.error(e)}if(!this.config.accessKey)return console.error("[PORCUPINE] Error: No AccessKey provided in config!");if("auto"==this.micConfig.recorder){let e=PLATFORM_RECORDER_MAP.get(o);console.log(`[PORCUPINE] Platform: '${o}'; attempting to use '${e}' to access microphone ...`),this.micConfig.recorder=e}this.recorderOptions=Object.assign({},this.defaultMicOption,this.micConfig),this.config.dev&&log("recorderOptions",this.recorderOptions),this.keywordNames=[],this.running=!1,this.mic=null,this.initialized=!0}init(){if(!this.initialized)return console.error("[PORCUPINE] Can't init Porcupine! (missing accessKey)");let e,i,t=[],r=[];this.config.detectors.forEach((e=>{if(e.Model){let i=e.Model.trim().toLowerCase();if("custom"==i)t.push(this.config.customModel);else{if(!keywordStringMap.has(i))return console.error(`[PORCUPINE] Keyword argument ${e.Model} is not in the list of built-in keywords`);t.push(getBuiltinKeywordPath(i))}}null==e.Sensitivity||isNaN(e.Sensitivity)||e.Sensitivity<0||e.Sensitivity>1?(console.error(`[PORCUPINE] ${e.Model}: Sensitivity must be a number in the range [0,1]`,e.Sensitivity),console.error(`[PORCUPINE] Set Sensitivity for ${e.Model} to 0.5`),r.push(.5)):r.push(e.Sensitivity)}));let o=void 0!==t;Array.isArray(t)||(t=t.split(","));for(let e of t){o&&keywordStringMap.has(e)&&console.warn(`[PORCUPINE] --keyword_path argument '${e}' matches a built-in keyword. Did you mean to use --keywords ?`);let i=e.split(/[\\|\/]/).pop().split("_")[0];this.keywordNames.push(i)}if(!t.length)return console.error("[PORCUPINE] No keyword found!");try{this.porcupine=new Porcupine(this.config.accessKey,t,r,i,e),log(`Ready for listening this wake word(s): ${this.keywordNames}`)}catch(e){console.error("[PORCUPINE] Error:",e.message),this.initialized=!1}}async start(){if(!this.initialized)return console.error("[PORCUPINE] Can't start Porcupine! (missing accessKey)");this.porcupine||await this.init(),this.startListening(),this.running=!0}stop(){this.stopListening(),this.running=!1}Detector(){if(!this.mic)return console.log("[PORCUPINE] Mic not activated!");if(!this.porcupine)return console.error("[PORCUPINE] Porpucine is not initialized !");const e=this.porcupine.frameLength;this.porcupine.sampleRate;var i=[];this.infoStream.on("data",(t=>{let r=new Array(t.length/2);for(let e=0;e<t.length;e+=2)r[e/2]=t.readInt16LE(e);i=i.concat(r);let o=this.chunkArray(i,e);i=o[o.length-1].length!==e?o.pop():[];for(let e of o){if(!this.porcupine)return;let i=this.porcupine.process(e);-1!==i&&this.running&&(log(`Detected '${this.keywordNames[i]}'`),this.callback(this.keywordNames[i]),this.stopListening())}})),this.infoStream.on("error",(e=>{log("Error in Info Stream: "+e),this.stopListening(),log("waiting before restarting..."),setTimeout((()=>{this.startListening()}),1e4)}))}error(e,i){return e||"1"==i?(e&&console.error("[PORCUPINE][ERROR] "+e),this.stop(),log("Retry restarting..."),void setTimeout((()=>{this.start()}),2e3)):"255"==i?(this.stop(),log("Timeout waiting restarting !"),void setTimeout((()=>{this.start()}),1e3)):void 0}startListening(){this.mic||(this.mic=null,this.infoStream=new PassThrough,this.mic=new Recorder(this.recorderOptions,this.infoStream,((e,i)=>{this.error(e,i)})),log("Starts listening."),this.mic.start(),this.Detector())}stopListening(){this.mic&&(this.porcupine.release(),this.porcupine=null,this.infoStream=null,this.keywordNames=[],this.mic.stop(),this.mic=null,log("Stops listening."))}chunkArray(e,i){return Array.from({length:Math.ceil(e.length/i)},((t,r)=>e.slice(r*i,r*i+i)))}}module.exports=PORCUPINE;