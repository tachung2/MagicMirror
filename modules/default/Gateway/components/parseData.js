var _load=require("../components/loadLibraries.js");async function init(a){a.Gateway={MMConfig:null,EXT:null,EXTDescription:{},EXTConfigured:[],EXTInstalled:[],EXTStatus:{},user:{_id:1,username:"admin",password:"admin"},initialized:!1,app:null,server:null,translation:null,schemaTranslatation:null,language:null,webviewTag:!1,GACheck:{find:!1,version:0,configured:!1,ready:!1},GAConfig:{},HyperWatch:null,radio:null,freeteuse:{},systemInformation:{lib:null,result:{}},activeVersion:{},homeText:null,errorInit:!1},a.SmartHome={lang:"en",use:!1,init:!1,last_code:null,last_code_user:null,last_code_time:null,user:{user:"admin",password:"admin",devices:["MMM-GoogleAssistant"]},actions:null,device:{},EXT:{},smarthome:{},oldSmartHome:{},homegraph:null}}async function parse(a,e){let o=await _load.libraries(a);return o?(console.error("[GATEWAY] Warning:",o,"needed library not loaded !"),void console.error("[GATEWAY] Try to solve it with `npm run rebuild` in Gateway directory")):(a.Gateway.MMConfig=await a.lib.GWTools.readConfig(a),a.Gateway.MMConfig?void(await a.lib.GWTools.MMConfigAddress(a)||(a.Gateway.language=a.Gateway.MMConfig.language,a.Gateway.webviewTag=a.lib.GWTools.checkElectronOptions(a.Gateway.MMConfig),a.Gateway.EXT=e.DB.sort(),a.Gateway.EXTDescription=e.Description,a.Gateway.translation=e.Translate,a.Gateway.schemaTranslatation=e.Schema,a.Gateway.EXTStatus=e.EXTStatus,a.Gateway.GACheck.version=a.lib.GWTools.searchGA(a),a.Gateway.GAConfig=a.lib.GWTools.getGAConfig(a.Gateway.MMConfig),a.Gateway.homeText=await a.lib.GWTools.getHomeText(a.lib,a.Gateway.language),a.Gateway.freeteuse=await a.lib.GWTools.readFreeteuseTV(a),a.Gateway.radio=await a.lib.GWTools.readRadioRecipe(a),a.Gateway.systemInformation.lib=new a.lib.SystemInformation(a.lib,a.Gateway.translation),a.Gateway.systemInformation.result=await a.Gateway.systemInformation.lib.initData(),a.config.CLIENT_ID?(a.SmartHome.lang=a.lib.SHTools.SHLanguage(a.Gateway.language),a.SmartHome.use=!0,a.SmartHome.user.user=a.config.username,a.SmartHome.user.password=a.config.password,a.lib.homegraph.init(a),a.lib.Device.create(a)):(console.log("[GATEWAY] no CLIENT_ID found in your config!"),console.warn("[GATEWAY] SmartHome functionality is disabled")))):(a.Gateway.errorInit=!0,console.error("[GATEWAY] Error: MagicMirror config.js file not found!"),void a.sendSocketNotification("ERROR","MagicMirror config.js file not found!")))}exports.init=init,exports.parse=parse;