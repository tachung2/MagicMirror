let log=(...t)=>{};class speedtest{constructor(t,e,o,s,a){this.lib=t,this.io=e,this.req=o,this.Gateway=s,a&&(log=(...t)=>{console.log("[GATEWAY] [SPEED]",...t)}),this.lib.moment.locale(this.Gateway.language)}init(t){this.io.once("connection",(t=>{log("Connected:",this.req.user.username),t.on("disconnect",(t=>{log("Disconnected:",this.req.user.username,"["+t+"]")})),t.emit("HELLO"),t.on("ST_Start",(async e=>{await this.start(t)}))}))}async start(t){log("Check SpeedTest");var e=new this.lib["speedtest-net"]({serverId:null,acceptLicense:!0,acceptGdpr:!0,progress:e=>this.progress(e,t)},this.lib);try{var o=await e.start()}catch(t){console.error("[GATEWAY] [SPEED]",t.message)}finally{o&&(o.timeLocale=this.lib.moment(Date.now()).format("lll"),o.download.bandwidth=this.oToMbps(o.download.bandwidth),o.upload.bandwidth=this.oToMbps(o.upload.bandwidth),log("Result:",o),this.Gateway.systemInformation.result.SpeedTest=o,t.emit("RESULT"),log("Done"))}}progress(t,e){switch(t.type){case"download":e.emit("DOWNLOAD",this.oToMbps(t.download.bandwidth)),log("Download:",this.oToMbps(t.download.bandwidth),"Mbps");break;case"upload":e.emit("UPLOAD",this.oToMbps(t.upload.bandwidth)),log("Upload:",this.oToMbps(t.upload.bandwidth),"Mbps");break;case"ping":e.emit("PING",t.ping.latency),log("Ping:",t.ping.latency,"ms")}}oToMbps(t){return t?(8e-6*t).toFixed(2):0}}module.exports=speedtest;