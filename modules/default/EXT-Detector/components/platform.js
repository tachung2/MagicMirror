const SYSTEM_LINUX="linux",SYSTEM_MAC="darwin",SYSTEM_WINDOWS="win32",X86_64="x64",ARM_32="arm",ARM_64="arm64",PLATFORM_BEAGLEBONE="beaglebone",PLATFORM_JETSON="jetson",PLATFORM_LINUX="linux",PLATFORM_MAC="mac",PLATFORM_RASPBERRY_PI="raspberry-pi",PLATFORM_WINDOWS="windows";function getCpuPart(t){const r=t.lib.fs.readFileSync("/proc/cpuinfo","ascii");for(let t of r.split("\n"))if(t.includes("CPU part")){const r=t.split(" ");return r[r.length-1].toLowerCase()}throw"Unsupported CPU."}function getLinuxPlatform(t){const r=getCpuPart(t);switch(r){case"0xc07":case"0xd03":case"0xd08":return PLATFORM_RASPBERRY_PI;case"0xd07":return PLATFORM_JETSON;case"0xc08":return PLATFORM_BEAGLEBONE;default:throw`Unsupported CPU: '${r}'`}}function getPlatform(t){const r=t.lib.os.platform(),n=t.lib.os.arch();if("darwin"===r&&("x64"===n||n===ARM_64))return"mac";if("win32"===r&&"x64"===n)return"windows";if("linux"===r)return"x64"===n?"linux":getLinuxPlatform(t);throw`System ${r}/${n} is not supported by this library.`}exports.getPlatform=getPlatform;