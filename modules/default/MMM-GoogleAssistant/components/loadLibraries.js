"use strict";var logGA=(...e)=>{};function libraries(e){e.config.debug&&(logGA=(...e)=>{console.log("[GA] [LIB]",...e)});let o=[{"@bugsounet/node-buffertomp3":"BufferToMP3"},{"@bugsounet/node-lpcm16":"Recorder"},{"@bugsounet/google-assistant":"GoogleAssistant"},{axios:"axios"},{cheerio:"cheerio"},{child_process:"childProcess"},{fs:"fs"},{os:"os"},{"html-entities":"html-entities"},{"node-html-parser":"HTMLParser"},{path:"path"},{"../components/assistant.js":"Assistant"},{"../components/screenParser.js":"ScreenParser"},{"../components/platform.js":"platform"},{"../components/shellExec.js":"shellExec"},{"../components/configMerge.js":"configMerge"},{"../components/googleSearch.js":"googleSearch"},{"../components/searchOnGoogle.js":"searchOnGoogle"},{"../components/recipes.js":"recipes"},{"../components/activateAssistant.js":"activateAssistant"}],s=0;return new Promise((r=>{o.forEach((o=>{for(const[r,t]of Object.entries(o)){let o=r,n=t;try{e.lib[n]||(e.lib[n]=require(o),logGA("Loaded:",o,"->","this.lib."+n))}catch(r){console.error("[GA] [LIB]",o,"Loading error!",r.toString(),r),e.sendSocketNotification("WARNING",{library:o}),s++,e.lib.error=s}}})),r(s),console.log("[GA] [LIB] All libraries loaded!")}))}exports.libraries=libraries;